name: Simple Auto Sync PRs

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  create-sync-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Debug - Show branches
        run: |
          echo "=== Local branches ==="
          git branch -a
          echo "=== Remote branches ==="
          git ls-remote --heads origin
      
      - name: Create Alpha Sync PR
        run: |
          echo "üîç Checking if alpha_staging branch exists..."
          if git ls-remote --exit-code --heads origin alpha_staging; then
            echo "‚úÖ Alpha staging branch exists"
            
            SYNC_BRANCH="sync/main-to-alpha/$(date +%Y%m%d-%H%M%S)"
            MAIN_SHA=$(git rev-parse --short HEAD)
            
            echo "Creating sync branch: $SYNC_BRANCH from alpha_staging"
            git fetch origin alpha_staging
            git checkout -b "$SYNC_BRANCH" origin/alpha_staging
            
            echo "Attempting to merge main..."
            if git merge --no-ff origin/main -m "üîÑ Sync main ($MAIN_SHA) into alpha_staging"; then
              echo "‚úÖ Merge successful"
              git push -u origin "$SYNC_BRANCH"
              
              # Create PR using GitHub API instead of gh CLI
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls \
                -d '{
                  "title": "üîÑ Sync main ‚Üí alpha_staging",
                  "body": "**Auto-sync after main update**\n\nüìç **Main commit:** `'$MAIN_SHA'`\nüéØ **Target:** `alpha_staging`\n‚úÖ **Status:** Clean merge\n\n**Review and merge when ready** ‚úÖ",
                  "head": "'$SYNC_BRANCH'",
                  "base": "alpha_staging"
                }'
            else
              echo "‚ö†Ô∏è Merge conflicts detected"
              git add -A
              git commit -m "üö® Sync main ($MAIN_SHA) with conflicts"
              git push -u origin "$SYNC_BRANCH"
              
              # Create draft PR for conflicts
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls \
                -d '{
                  "title": "üö® Sync main ‚Üí alpha_staging (CONFLICTS)",
                  "body": "**‚ö†Ô∏è MERGE CONFLICTS DETECTED**\n\nüìç **Main commit:** `'$MAIN_SHA'`\nüéØ **Target:** `alpha_staging`\nüö® **Status:** Manual resolution required\n\n**Action needed:** Resolve conflicts and mark ready for review",
                  "head": "'$SYNC_BRANCH'",
                  "base": "alpha_staging",
                  "draft": true
                }'
            fi
          else
            echo "‚ùå Alpha staging branch doesn't exist, skipping"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Beta Sync PR
        run: |
          echo "üîç Checking if beta_diagnosis branch exists..."
          if git ls-remote --exit-code --heads origin beta_diagnosis; then
            echo "‚úÖ Beta diagnosis branch exists"
            
            SYNC_BRANCH="sync/main-to-beta/$(date +%Y%m%d-%H%M%S)"
            MAIN_SHA=$(git rev-parse --short HEAD)
            
            echo "Creating sync branch: $SYNC_BRANCH from beta_diagnosis"
            git fetch origin beta_diagnosis
            git checkout -b "$SYNC_BRANCH" origin/beta_diagnosis
            
            echo "Attempting to merge main..."
            if git merge --no-ff origin/main -m "üîÑ Sync main ($MAIN_SHA) into beta_diagnosis"; then
              echo "‚úÖ Merge successful"
              git push -u origin "$SYNC_BRANCH"
              
              # Create PR using GitHub API
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls \
                -d '{
                  "title": "üîÑ Sync main ‚Üí beta_diagnosis",
                  "body": "**Auto-sync after main update**\n\nüìç **Main commit:** `'$MAIN_SHA'`\nüéØ **Target:** `beta_diagnosis`\n‚úÖ **Status:** Clean merge\n\n**Review and merge when ready** ‚úÖ",
                  "head": "'$SYNC_BRANCH'",
                  "base": "beta_diagnosis"
                }'
            else
              echo "‚ö†Ô∏è Merge conflicts detected"
              git add -A
              git commit -m "üö® Sync main ($MAIN_SHA) with conflicts"
              git push -u origin "$SYNC_BRANCH"
              
              # Create draft PR for conflicts
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls \
                -d '{
                  "title": "üö® Sync main ‚Üí beta_diagnosis (CONFLICTS)",
                  "body": "**‚ö†Ô∏è MERGE CONFLICTS DETECTED**\n\nüìç **Main commit:** `'$MAIN_SHA'`\nüéØ **Target:** `beta_diagnosis`\nüö® **Status:** Manual resolution required\n\n**Action needed:** Resolve conflicts and mark ready for review",
                  "head": "'$SYNC_BRANCH'",
                  "base": "beta_diagnosis",
                  "draft": true
                }'
            fi
          else
            echo "‚ùå Beta diagnosis branch doesn't exist, skipping"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
